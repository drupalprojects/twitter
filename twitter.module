<?php
/**
 * @file
 * Provides API integration with the Twitter microblogging service.
 */

use Drupal\Core\Entity\Entity;

/**
 * Implements hook_menu().
 */
function twitter_menu() {
  $items['twitter/oauth'] = array(
    'title' => 'Twitter OAuth',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_oauth_callback'),
    'type' => MENU_CALLBACK,
    'file' => 'twitter.pages.inc',
  );

  $items['admin/config/services/twitter'] = array(
    'title' => 'Twitter',
    'description' => 'Twitter accounts and settings.',
    'page callback' => 'twitter_user_settings',
    'access arguments' => array('administer twitter accounts'),
    'file' => 'twitter.pages.inc',
  );

  $items['admin/config/services/twitter/default'] = array(
    'title' => 'Twitter',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/twitter/settings'] = array(
    'title' => 'Settings',
    'description' => 'Twitter settings.',
    'route_name' => 'twitter_settings_form',
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/edit/twitter'] = array(
    'title' => 'Twitter accounts',
    'page callback' => 'twitter_user_settings',
    'page arguments' => array(1),
    'access callback' => 'twitter_account_access',
    'weight' => 10,
    'file' => 'twitter.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function twitter_permission() {
  return array(
    'add twitter accounts' => array(
      'title' => t('Add Twitter accounts'),
    ),
    'add authenticated twitter accounts' => array(
      'title' => t('Add authenticated Twitter accounts'),
    ),
    'administer twitter accounts' => array(
      'title' => t('Administer Twitter accounts'),
    ),
  );
}

/**
 * Access callback for the Twitter accounts page.
 *
 * @return
 *   Boolean TRUE if the current user has access.
 */
function twitter_account_access() {
  return user_access('add twitter accounts') || user_access('add authenticated twitter accounts');
}

/**
 * Implements hook_theme().
 */
function twitter_theme() {
  return array(
    'twitter_account_list_form' => array(
      'render element' => 'form',
    ),
    'twitter_status' => array(
      'variables' => array(
        'status' => NULL,
        'author' => NULL,
      ),
      'template' => 'tweet',
      'path' => drupal_get_path('module', 'twitter'),
    ),
    'twitter_user_accounts' => array(
      'variables' => array(
        'accounts' => array(),
      ),
    ),
  );
}

/**
 * Default callback for theme('twitter_user_accounts');
 *
 * Renders a list of Twitter accounts for the user profile page.
 */
function theme_twitter_user_accounts($variables) {
  $accounts = $variables['accounts'];
  $items = array();
  module_load_include('inc', 'twitter');
  foreach ($accounts as $twitter_account) {
    $tweets = twitter_tweets($twitter_account->screen_name);
    // If we have tweets for this Twitter account, link to the View. If not, link to Twitter.
    if (count($tweets)) {
      $items[] = l('@' . $twitter_account->screen_name, 'tweets/' . $twitter_account->screen_name);
    }
    else {
      $items[] = _twitter_user_profile($twitter_account->screen_name);
    }
  }
  return theme('item_list', array('items' => $items));
}

/**
 * Very lightweight helper function to generate a TinyURL for a given post.
 */
function twitter_shorten_url($url) {
  if (module_exists('shorten')) {
    return shorten_url($url);
  }
  else {

    $response = drupal_http_request(config('twitter.settings')->get('tinyurl') . "/api-create.php?url=" . $url);
    if ($response->code == 200) {
      return $response->data;
    }
    else {
      return $url;
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Imports new Twitter statuses for site users, and deletes expired tweets.
 */
function twitter_cron() {
  if (!config('twitter_settings')->get('import')) {
    return;
  }
  // Check if we can connect to Twitter before proceeding.
  module_load_include('inc', 'twitter');
  $twitter = twitter_connect();
  if (!$twitter) {
    return;
  }

  // Pull up a list of Twitter accounts that are flagged for updating,
  // sorted by how long it's been since we last updated them. This ensures
  // that the most out-of-date accounts get updated first.
  $query = Drupal::EntityQuery('twitter_account');
  $query->entityCondition('entity_type', 'twitter_account')
    ->propertyCondition('uid', 0, '<>')
    ->propertyCondition('import', 1)
    ->propertyOrderBy('last_refresh')
    ->range(0, 20);
  $result = $query->execute();
  $ids = !empty($result['twitter_account']) ? array_keys($result['twitter_account']) : array();
  if (count($ids)) {
    $twitter_accounts = entity_load('twitter_account', $ids);
    // Iterate over Twitter accounts and fetch tweets.
    try {
      foreach ($twitter_accounts as $twitter_account) {
        // Fetch tweets and mentions.
        twitter_fetch_user_timeline($twitter_account->twitter_uid);
        if ($twitter_account->is_auth() && $twitter_account->mentions) {
          twitter_fetch_mentions_timeline($twitter_account->twitter_uid);
        }
        // Mark the time this account was updated.
        $twitter_account->last_refresh = REQUEST_TIME;
        twitter_account_save($twitter_account);
      }
    } catch (TwitterException $e) {
      // The exception has already been logged so we do not need to do anything here apart from catching it.
    }
  }

  // Nuke old statuses.
  if ($age = config('twitter.settings')->get('expire')) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'twitter_account')
      ->propertyCondition('created_time', REQUEST_TIME - $age, '<');
    $result = $query->execute();
    entity_delete_multiple('twitter_account', array_keys($result['twitter_account']));
  }
}

/**
 * Implements hook_filter_info()
 */
function twitter_filter_info() {
  $filters['twitter_username'] = array(
    'title' => t('Twitter @username converter'),
    'description' => t('Converts Twitter-style @usernames into links to Twitter account pages.'),
    'type' => FILTER_TYPE_TRANSFORM_IRREVERSIBLE,
    'process callback' => '_twitter_filter_username',
    'tips callback' => '_twitter_filter_tip_username',
  );
  $filters['twitter_hashtag'] = array(
    'title' => t('Twitter #hashtag converter'),
    'description' => t('Converts Twitter-style #hashtags into links to hashtags.org.'),
    'type' => FILTER_TYPE_TRANSFORM_IRREVERSIBLE,
    'process callback' => '_twitter_filter_hashtag',
    'tips callback' => '_twitter_filter_tip_hashtag',
  );
  $filters['twitter_links'] = array(
    'title' => t('Twitter link converter'),
    'description' => t('Makes links in Twitter messages to be opened in new windows and adds ' .
                       'rel="nofollow" so these links do not penalize SEO.'),
    'type' => FILTER_TYPE_TRANSFORM_IRREVERSIBLE,
    'process callback' => '_twitter_filter_link',
    'tips callback' => '_twitter_filter_tip_link',
  );

  return $filters;
}

/**
 * Filter tips callback function for Twitter usernames.
 */
function _twitter_filter_tip_username($filter, $format, $long = FALSE) {
  return t('Twitter-style @usernames are linked to their Twitter account pages.');
}

/**
 * Filter tips callback function for Twitter hashtags.
 */
function _twitter_filter_tip_hashtag($format, $long = FALSE) {
  return t('Twitter-style #hashtags are linked to !url.', array(
    '!url' => '<a href="http://search.twitter.com/">search.twitter.com</a>')
  );
}

/**
 * Filter tips callback function for Twitter links.
 */
function _twitter_filter_tip_link($filter, $format, $long = FALSE) {
  return t('Twitter message links are opened in new windows and rel="nofollow" is added.');
}

/**
 * Callback for twitter @username converter.
 */
function _twitter_filter_username($text, $filter) {
  $prefix = '@';
  $destination = config('twitter.settings')->get('host') . '/';
  return _twitter_filter_text($text, $prefix, $destination);
}

/**
 * Callback for twitter #hashtag converter.
 */
function _twitter_filter_hashtag($text, $filter) {
  $prefix = '#';
  $destination = config('twitter.settings')->get('search') . '/search?q=%23';
  return _twitter_filter_text($text, $prefix, $destination);
}

/**
 * This helper function converts Twitter-style @usernames and #hashtags into
 * actual links.
 */
function _twitter_filter_text($text, $prefix, $destination) {
  $matches = array(
    '/\>' . $prefix . '(\w+)/ui',
    '/^' . $prefix . '(\w+)/ui',
    '/(\s+)' . $prefix . '(\w+)/ui',
  );
  $replacements = array(
    '><a href="' . $destination . '${1}">' . $prefix . '${1}</a>',
    '<a href="' . $destination . '${1}">' . $prefix . '${1}</a>',
    '${1}<a href="' . $destination . '${2}">' . $prefix . '${2}</a>',
  );
  return preg_replace($matches, $replacements, $text);
}

/**
 * Callback for twitter link converter.
 */
function _twitter_filter_link($text, $filter) {
  return str_replace("<a ", '<a target="_blank" rel="nofollow" ', $text);
}

/**
 * Implements hook_views_api().
 */
function twitter_views_api() {
  return array('api' => 2);
}

/**
 * Implements hook_user_load().
 */
function twitter_user_load($accounts) {
  foreach ($accounts as $twitter_uid => $account) {
    $accounts[$twitter_uid]->twitter_accounts = module_invoke_all('twitter_accounts', $account);
  }
}

/**
 * Implements hook_twitter_accounts().
 *
 * @return
 *   array with Twitter accounts
 */
function twitter_twitter_accounts($account) {
  $query = Drupal::EntityQuery('twitter_account');
  $query->entityCondition('entity_type', 'twitter_account')
    ->propertyCondition('uid', $account->uid);
  $result = $query->execute();

  $ids = !empty($result['twitter_account']) ? array_keys($result['twitter_account']) : array();
  $twitter_accounts = entity_load('twitter_account', $ids);
  return $twitter_accounts;
}

/**
 * Implements hook_user_delete().
 *
 * Removes user's Twitter accounts and tweets
 */
function twitter_user_delete($account) {
  $twitter_accounts = twitter_twitter_accounts($account);
  entity_delete_multiple('twitter_account', array_keys($twitter_accounts));
}

/**
 * Implements hook_user_view_alter()
 *
 * Adds Twitter account information to the user profile.
 */
function twitter_user_view_alter(&$build, \Drupal\user\Plugin\Core\Entity\User $account, \Drupal\entity\Plugin\Core\Entity\EntityDisplay $display) {
  if (!empty($account->twitter_accounts)) {
    $build['twitter'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Twitter accounts'),
      '#markup' => theme('twitter_user_accounts', array('accounts' => $account->twitter_accounts)),
      '#weight' => 10,
    );
  }
}

/**
 * Checks if the Twitter Application keys are set.
 *
 * @return
 *   boolean TRUE if both the Twitter Application key and secret are set.
 */
function twitter_api_keys() {
  $twitter_settings = config('twitter.settings');
  $key = $twitter_settings->get('consumer_key');
  $secret = $twitter_settings->get('consumer_secret');
  return !(empty($key) && empty($secret));
}

/**
 * Helper to build a Twitter profile URL
 */
function _twitter_user_profile($screen_name) {
  return l('@' . $screen_name, config('twitter.settings')->get('host') . '/' . $screen_name);
}

/**
 * Helper to build a Twitter status URL.
 *
 * @param object $status
 *   A TwitterStatus object.
 */
function _twitter_status_url($status) {
  return config('twitter.settings')->get('host') . '/' . $status->user->screen_name . '/status/' . $status->id;
}
